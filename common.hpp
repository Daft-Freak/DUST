#pragma once

#include <cstdint>
#include <gba/input/key.hpp>

extern gba::keystate key_state;

inline auto palette_ram = reinterpret_cast<uint16_t *>(0x05000000);
inline auto video_ram = reinterpret_cast<uint16_t *>(0x06000000);

void clear_text();
void write_text(int x, int y, const char *text);

void wait_for_exit();

// generates a pattern of colourful Xs
void gen_affine_tiles(uint16_t *char_base, uint16_t *screen_base, int screen_size_tiles);

// test declarations
void display_layer_none();
void display_cgb_mode();
void display_forced_blank();
void display_priority_default();
void display_stat_flags();
void display_layer0_char_base();
void display_layer0_4bpp();
void display_layer0_8bpp();
void display_layer0_size0();
void display_layer0_size1();
void display_layer0_size2();
void display_layer0_size3();
void display_layer0_flip();
void display_layer0_mode1();
void display_layer0_mode2();
void display_layer0_mode3();
void display_layer0_mode4();
void display_layer0_mode5();
void display_layer0_char_base_invalid();
void display_layer0_screen_base_invalid();
void display_layer2_mode0();
void display_layer2_mode1();
void display_layer2_mode1_char_base();
void display_layer2_mode1_wrap();
void display_layer2_mode1_size1();
void display_layer2_mode1_size2();
void display_layer2_mode1_size3();
void display_layer2_mode1_rotscale();
void display_layer2_mode2();
void display_layer2_mode3();
void display_layer2_mode3_rotscale();
void display_layer2_mode4();
void display_layer2_mode4_pageflip();
void display_layer2_mode4_rotscale();
void display_layer2_mode5();
void display_layer2_mode5_pageflip();
void display_layer2_mode5_rotscale();
void display_obj_regular();
void display_obj_affine();
void display_obj_affine_double();
void display_obj_hidden();
void display_obj_regular_8bpp();
void display_obj_affine_8bpp();
void display_obj_regular_hflip();
void display_obj_regular_vflip();
void display_obj_regular_hvflip();
void display_obj_regular_8bpp_hflip();
void display_obj_regular_8bpp_vflip();
void display_obj_regular_8bpp_hvflip();
void display_obj_affine_rotscale();
void display_obj_affine_8bpp_rotscale();
void display_obj_affine_double_rotscale();
void display_obj_regular_4bpp_pal();
void display_obj_regular_1d();
void display_obj_regular_8bpp_1d();
void display_obj_mixed();
void display_obj_wrap_x();
void display_obj_wrap_y();
void display_obj_wrap_y_bug();
void display_obj_priority();
void display_obj_priority_bug();
void display_obj_bmp_char_base();
void display_obj_line_limit_regular_size0();
void display_obj_line_limit_regular_size1();
void display_obj_line_limit_regular_size2();
void display_obj_line_limit_regular_size3();
void display_obj_line_limit_affine_size0();
void display_obj_line_limit_affine_size1();
void display_obj_line_limit_affine_size2();
void display_obj_line_limit_affine_size3();
void display_obj_line_limit_affine_double_size0();
void display_obj_line_limit_affine_double_size1();
void display_obj_line_limit_affine_double_size2();
void display_obj_line_limit_affine_double_size3();
void display_obj_line_limit_regular_offscreen();
void display_obj_line_limit_regular_hidden();
void display_obj_line_limit_regular_size0_hblank_access();
void display_obj_line_limit_regular_size2_hblank_access();
void display_window_win0_bg();
void display_window_win1_bg();
void display_window_obj_win_bg();
void display_window_obj_win_mixed_bg();
void display_window_priority();
void display_window_objects();
void display_window_objects_mixed();
void display_window_win0_bg_affine();
void display_window_hblank_irq();
void display_window_hblank_dma();
void display_window_invalid_x1();
void display_window_invalid_x2();
void display_window_invalid_y1();
void display_window_invalid_y2();
void display_window_invalid_y2_no_disable();
void display_mosaic_mode0_0();
void display_mosaic_mode0_1_1();
void display_mosaic_mode0_4_4();
void display_mosaic_mode0_9_9();
void display_mosaic_mode0_15_15();
void display_mosaic_mode0_0_15();
void display_mosaic_mode0_15_0();
void display_mosaic_mode0_4_4_scroll();
void display_mosaic_mode2_0();
void display_mosaic_mode2_1_1();
void display_mosaic_mode2_4_4();
void display_mosaic_mode2_9_9();
void display_mosaic_mode2_15_15();
void display_mosaic_mode2_0_15();
void display_mosaic_mode2_15_0();
void display_mosaic_mode2_1_1_rotscale();
void display_mosaic_mode2_4_4_rotscale();
void display_mosaic_mode2_9_9_rotscale();
void display_mosaic_mode2_15_15_rotscale();
void display_mosaic_mode2_0_15_rotscale();
void display_mosaic_mode2_15_0_rotscale();
void display_mosaic_mode3_0();
void display_mosaic_mode3_1_1();
void display_mosaic_mode3_15_15();
void display_mosaic_mode3_0_15();
void display_mosaic_mode3_15_0();
void display_mosaic_mode4_0();
void display_mosaic_mode4_1_1();
void display_mosaic_mode4_15_15();
void display_mosaic_mode4_0_15();
void display_mosaic_mode4_15_0();
void display_mosaic_mode5_0();
void display_mosaic_mode5_1_1();
void display_mosaic_mode5_15_15();
void display_mosaic_mode5_0_15();
void display_mosaic_mode5_15_0();
void display_mosaic_objects_regular_1_1();
void display_mosaic_objects_regular_4_4();
void display_mosaic_objects_regular_9_9();
void display_mosaic_objects_regular_15_15();
void display_mosaic_objects_regular_0_15();
void display_mosaic_objects_regular_15_0();
void display_mosaic_objects_affine_1_1();
void display_mosaic_objects_affine_4_4();
void display_mosaic_objects_affine_9_9();
void display_mosaic_objects_affine_15_15();
void display_mosaic_objects_affine_0_15();
void display_mosaic_objects_affine_15_0();
void display_mosaic_window();
void display_blend_mode0();
void display_blend_mode1();
void display_blend_mode1_all();
void display_blend_mode1_add();
void display_blend_mode1_reversed();
void display_blend_mode1_no_second();
void display_blend_mode1_between();
void display_blend_mode1_objects();
void display_blend_mode2();
void display_blend_mode2_backdrop();
void display_blend_mode3();
void display_blend_mode3_backdrop();
void display_blend_window();
void display_blend_object_trans();
void display_blend_object_trans_enable();
void display_blend_object_trans_priority();

void dma_delay();
void dma_priority();
void dma_priority_reverse();
void dma_priority_hblank();
void dma_timer();
void dma_timer_multi();
